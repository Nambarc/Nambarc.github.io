
// ----------------------------------------------------------------------------
// BLOCK 1
let block_1_cipher_text = "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";
let block_1 = document.getElementById("block_1");
let block_1_password_entry = document.getElementById("block_1_password_entry");
let block_1_decode_button = document.getElementById("block_1_decode_button");
let block_1_taunt = document.getElementById("block_1_taunt");

block_1_decode_button.addEventListener("click", function () {
  let password = block_1_password_entry.value;
  let decrypted_text = Decode(block_1_cipher_text, password);
  if (decrypted_text == "fail") {
    block_1_taunt.innerText = "Did you try to guess...? You cheeky bugger!";
  } else {
    block_1.innerHTML = decrypted_text;
  }
});
// ----------------------------------------------------------------------------

// Function to decode an encrypted block of text given the correct password.
function Decode(cipher_text, password) {

  // Decrypt the text using the provided password.
  let original_bytes = CryptoJS.AES.decrypt(cipher_text, password);

  // Try to interpret the decrypted bytes as a UTF-8 string.
  let decrypted_text = "fail";
  try {
    decrypted_text = original_bytes.toString(CryptoJS.enc.Utf8);
  } catch (error) {
    console.log(error);
  }
  return decrypted_text;
}

// Function to encode a raw block of text into cipher text with the given password.
function Encode(raw_text, password) {
  let encrypted_text = CryptoJS.AES.encrypt(raw_text, password).toString();
  return encrypted_text;
}

let raw_text = `

`;
let password = "";
let encrypted_text = Encode(raw_text, password);
console.log(encrypted_text);
