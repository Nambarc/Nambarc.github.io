
// ----------------------------------------------------------------------------
// BLOCK 1
let block_1_cipher_text = "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";
let block_1 = document.getElementById("block_1");
let block_1_password_entry = document.getElementById("block_1_password_entry");
let block_1_decode_button = document.getElementById("block_1_decode_button");
let block_1_taunt = document.getElementById("block_1_taunt");

block_1_decode_button.addEventListener("click", function () {
  let password = block_1_password_entry.value;
  let decrypted_text = Decode(block_1_cipher_text, password);
  if (decrypted_text == "fail") {
    block_1_taunt.innerText = "Did you try to guess...? You cheeky bugger!";
  } else {
    block_1.innerHTML = decrypted_text;
  }
});
// ----------------------------------------------------------------------------

// Function to decode an encrypted block of text given the correct password.
function Decode(cipher_text, password) {

  // Decrypt the text using the provided password.
  let original_bytes = CryptoJS.AES.decrypt(cipher_text, password);

  // Try to interpret the decrypted bytes as a UTF-8 string.
  let decrypted_text = "fail";
  try {
    decrypted_text = original_bytes.toString(CryptoJS.enc.Utf8);
  } catch (error) {
    console.log(error);
  }
  return decrypted_text;
}

// Function to encode a raw block of text into cipher text with the given password.
function Encode(raw_text, password) {
  let encrypted_text = CryptoJS.AES.encrypt(raw_text, password).toString();
  return encrypted_text;
}

let raw_text = `

`;
let password = "";
let encrypted_text = Encode(raw_text, password);
console.log(encrypted_text);
